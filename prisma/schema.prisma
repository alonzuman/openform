generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  forms         Form[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Form {
  id         String       @id @default(cuid())
  title      String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  fields     Field[]
  submission Submission[]
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

model Field {
  id              String            @id @default(cuid())
  title           String?
  type            String
  formId          String
  form            Form              @relation(fields: [formId], references: [id], onDelete: Cascade)
  options         Option[]
  required        Boolean
  order           Int
  submissionField SubmissionField[]
}

model Option {
  id      String  @id @default(cuid())
  title   String?
  fieldId String
  field   Field   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  order   Int
}

model Submission {
  id              String            @id @default(cuid())
  formId          String
  form            Form              @relation(fields: [formId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  submissionField SubmissionField[]
  anonymousId     String?
}

model SubmissionField {
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  fieldId      String
  field        Field      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value        String
  anonymousId  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([submissionId, fieldId, anonymousId])
}
